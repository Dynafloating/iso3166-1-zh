using Processors;
using System.Text.Encodings.Web;
using System.Text.Json;

Console.WriteLine("Welcome to ISO3166-1 web crawler!");
Console.WriteLine("this console application will help you retrieve data from WIKI page");
Console.WriteLine("and convert it to C# class and JSON formatted documents.");
Console.WriteLine("Generated files will save to (please provide the folder path): ");

var path = string.Empty;
while (string.IsNullOrEmpty(path))
{
    var inputPath = Console.ReadLine();
    var fullPath = Path.GetFullPath(!string.IsNullOrEmpty(inputPath) ? inputPath : ".");
    if (!Directory.Exists(fullPath))
    {
        Console.WriteLine("Invalid path, directory does not exists!");
        Console.WriteLine();
        Console.WriteLine("Generated files will save to (please the provide folder path): ");
    }
    else
    {
        path = fullPath;
    }
}

Console.WriteLine("Retrieving...");

var twProcessor = new TWProcessor();
var twCountries = await twProcessor.ListCountryAsync();

var cnProcessor = new CNProcessor();
var cnCountries = await cnProcessor.ListCountryAsync();

foreach (var country in cnCountries)
{
    var twCountry = twCountries.Where(o => o.TwoLetterCode == country.TwoLetterCode).Single();
    twCountry.SimplifiedChineseName = country.SimplifiedChineseName;
}

Console.WriteLine("Generating files...");

var jsonPath = Path.Combine(path, "iso3166.json");
var jsonString = JsonSerializer.Serialize(
    new { list = twCountries },
    new JsonSerializerOptions()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
    });

File.WriteAllText(jsonPath, jsonString);

var csPath = Path.Combine(path, "Country.cs");

var notes = $"/*\r\n * Generated by WebCrawler at {DateTime.Now:yyyy/MM/dd HH:mm:ss}\r\n" +
    $" * Data source: {twProcessor.WikiUrl} and {cnProcessor.WikiUrl}\r\n * License: https://opensource.org/licenses/Apache-2.0 \r\n */\r\n";

var countryModelTexts = twCountries
    .Select(o => $"new CountryModel(\"{o.Name}\", \"{o.TwoLetterCode}\", \"{o.ThreeLetterCode}\", " +
        $"\"{o.NumericCode}\", \"{o.TraditionalChineseName}\", \"{o.SimplifiedChineseName}\", {(o.Independent ? "true" : "false")})");

var csString = notes +
    "using System.Collections.Generic;\r\nnamespace ISO3166\r\n{\r\n" +
    "    public class Country\r\n    {\r\n        public static List<CountryModel> List = new List<CountryModel>()\r\n        {\r\n            " +
    string.Join(",\r\n            ", countryModelTexts) +
    "\r\n        };\r\n    }\r\n}";

File.WriteAllText(csPath, csString);

Console.WriteLine("Following files generated:");
Console.WriteLine(jsonPath);
Console.WriteLine(csPath);

Console.WriteLine("Press ENTER to close the program.");
Console.ReadLine();